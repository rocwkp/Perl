#!d:/test/perl/bin/perl.exe

#//##################################################################################
#//
#// Name:                AutoDoAll.pl
#//
#// Description: 
#//
#//
#// Current Version : 1.0.1
#// Author: Rock
#// Complete Data:
#//
#// Last Version : 1.0.0
#// Last Author : Rock
#// Complete Data : 
#// 1.0.1 collect ieprf server result in clear_for_iperf function
#//##################################################################################


use strict;
#use Net::SSH::Perl;
#use Net::OpenSSH ();
use XML::Simple;
use Data::Dumper;
use Net::Telnet ();
use FileHandle;
################################################################################
#         variables define                                                     #
################################################################################
#GlobalParam from XML


#TestParam from XML
my $delarp;
my $round;
my $frenable;
my $penable;
my $ienable;
my $spenable;
my $sienable;
my $psize;
my $packetsize;
my $senable;
my $benable;
my $cenable;

my $count;
my $frtime;
my $BoxAlias;
my $workdir;
my $CygwinPath;
my $pausetime;
my $srcwanip;
my $dstwanip;
my $srclanip;
my $dstlanip;

my $BoxIP;
my $snrname;
my $snrenable;
my $boxcmd1;
my $boxcmd2;
my $boxvalue1;
my $boxvalue2;
my $dirname;
my $i;

#Param generated by program

my %AllBoxInfo;
my %AllSenarioInfo;
my %CmdList;
my @lines;

#Param for telnet
my $user = "root";
my $pass = "Sp2kh0yy";
my $timeout = 20000;
my $boxcmd;

################################################################################
#          main process begins here                                            #
################################################################################

my $confxml = "./conf.xml";
my $simple = XML::Simple->new(ForceArray => 0, KeepRoot => 1);
my $data   = $simple->XMLin($confxml);

# DEBUG
#print Dumper($data) . "\n";


#Get GlobalParam from XML

$workdir = $data->{GlobalParam}->{workdir};
$CygwinPath = $data->{GlobalParam}->{CygwinPath};
$delarp = $data->{GlobalParam}->{delarp};
$round = $data->{GlobalParam}->{round};
$count = $data->{GlobalParam}->{count};
$packetsize = $data->{GlobalParam}->{PacketSize};
$frtime = $data->{GlobalParam}->{FRTime};
$pausetime = $data->{GlobalParam}->{PauseTime};
$frenable = $data->{GlobalParam}->{ActionItem}->{FREnable};
$penable = $data->{GlobalParam}->{ActionItem}->{PingEnable};
$ienable = $data->{GlobalParam}->{ActionItem}->{IperfEnable};
$spenable = $data->{GlobalParam}->{ActionItem}->{PingSizeEnable};
$sienable = $data->{GlobalParam}->{ActionItem}->{IperfSizeEnable};

# DEBUG
print "$CygwinPath  \n";
print "$workdir  \n";


################################################################################
# Main process starts                                                           #
################################################################################

		foreach my $ExecCmd (@{$data->{GlobalParam}->{CmdList}->{Cmd}}) {
    #Get each TestParam from XML
    $cenable = $ExecCmd->{cenable};
    $boxcmd1 = $ExecCmd->{boxcmd1};
    $boxvalue1 = $ExecCmd->{boxvalue1};
    $boxcmd2 = $ExecCmd->{boxcmd2};
    $boxvalue2 = $ExecCmd->{boxvalue2};

		if ($cenable==0) { next; }
		
		foreach my $SingleTest (@{$data->{GlobalParam}->{AllBoxInfo}->{BoxInfo}}) {
    #Get each TestParam from XML
    $benable = $SingleTest->{benable};
    $BoxIP = $SingleTest->{BoxIP};

		if ($cenable==0) { next; }
    # DEBUG
    print "$BoxIP \n";

    if ($benable==0) { next; }

## set parameter for test
  	&telnet_to_Box;

}
## mkdir named by parameter
if ( ${boxcmd1}=~/query_interval/ ){
  $dirname="query${boxvalue1}_reply${boxvalue2}";
}else{
	$dirname="slow${boxvalue1}_fast${boxvalue2}";
}
if (-e "$dirname") { system "del /S /Q $dirname"; }
mkdir "$dirname",0777 or warn "cannot make main dir : $!";
print "mkdir $dirname ok \n";

#if (-e "${boxcmd1}${boxvalue1}_${boxcmd2}${boxvalue2}") { system "del /S /Q ${boxcmd1}${boxvalue1}_${boxcmd2}${boxvalue2}"; }
#mkdir "${boxcmd1}${boxvalue1}_${boxcmd2}${boxvalue2}",0777 or warn "cannot make main dir : $!";
#print "mkdir ${boxcmd1}${boxvalue1}_${boxcmd2}${boxvalue2} ok \n";

## doing test according to senarioname

    foreach my $SenarioTest (@{$data->{GlobalParam}->{AllSenarioInfo}->{SenarioInfo}}) {
    #Get each TestParam from XML
    $snrenable = $SenarioTest->{Senarioenable};
    $snrname = $SenarioTest->{SenarioName};
    #ip
		$srcwanip = $SenarioTest->{SrcWanIP};
		$dstwanip = $SenarioTest->{DstWanIP};
		$srclanip = $SenarioTest->{SrcLanIP};
		$dstlanip = $SenarioTest->{DstLanIP};
		# DEBUG
		print "srcwanip $srcwanip \n";
		print "srclanip $srclanip \n";
		print "dstwanip $dstwanip \n";
		print "dstlanip $dstlanip \n";
		print " \n";


if ($snrenable==1){
			
## Start First Reply test
if ($frenable==1){
		&do_first_reply;
}

## Start Ping test
if ($penable==1){
		&do_ping;
}

## Start iperf test

if ($ienable==1){
#		&prepare_for_iperf;
		&do_iperf;
#		&clear_for_iperf;
}

##mkdir and copy file into it
if (-e "${dirname}/${snrname}") { system "del /S /Q ${dirname}/${snrname}"; }

mkdir "${dirname}/${snrname}",0777 or warn "cannot make ${dirname}/${snrname} dir : $!";
print "mkdir ${dirname}/${snrname} ok \n";
system "move /Y *.txt ${dirname}/${snrname}";


}else{ next;}

}
    

}

################################################################################
# New process ends                                                             #
################################################################################

system "echo program ends";
################################################################################
#main process ends                                                             #
################################################################################


################################################################################
#lib functions begins here                                                     #
################################################################################




#/**********************************************************************
#function name: do_ping
#
#description: doing ping test according to parameters in conf.xml
#              
#	
#input: 
#
#output: 
#**********************************************************************/
sub do_ping {

## debug
print "Start doing ping test,pleast wait for at least $count seconds \n";
sleep 1;

## start ping test

my $t = new Net::Telnet (Timeout => $timeout,
                      );                 #端口默认
$t->open("$srcwanip");
$t->login($user, $pass);
print @lines;

## << Prepare for test begin
@lines = $t->cmd(" ping -c 30 $dstlanip ");
#print @lines;

## DEBUG
print "Prepare for test with arp done \n";
print " \n";

## >> Prepare for test end 

for (my $i = 0; $i < $round; $i++) {

print "Ping Round $i ..... patience is virtue !!! only $count seconds \n";
print " \n";
	
@lines = $t->cmd(" ping -s $packetsize -c $count $dstlanip > /var/ping_$i.txt ");
#print @lines;

## make result file
		if (-e "ping_$i.txt") { system "del /S /Q ping_$i.txt"; }
		my $Result = "ping_$i.txt";
    open RESULT, ">$Result"
        or die "Open $Result file with error: ($!)";
    print RESULT " $srclanip ----- $dstlanip \n";
        
		@lines = $t->cmd(" cat /var/ping_$i.txt ");
    print RESULT "@lines\n";
      
		close RESULT; 

## DEBUG
print "make ping result file ping_$i.txt finish \n";
print " \n";


}

## del box file
@lines = $t->cmd(" rm -rf /var/ping*.txt ");
print @lines;

$t->close;

## DEBUG
print "finish doing ping test \n";
print " \n";

}


#/**********************************************************************
#function name: do_first_reply
#
#description: generate first packet reply time
#              
#	
#input: 
#
#output: 
#**********************************************************************/
sub do_first_reply {

## debug
print "Start doing first_reply test,pleast wait for at least $frtime seconds \n";
sleep 1;

## start first reply test

my $t = new Net::Telnet (Timeout => $timeout,
                      );                 #端口默认
$t->open("$srcwanip");
$t->login($user, $pass);
print @lines;

## << Prepare for test begin

## del src arp 
@lines = $t->cmd(" arp -d $dstlanip ");
print @lines;

## DEBUG
#@lines = $t->cmd(" arp -n ");
#print @lines;

## DEBUG
print "delete src arp finish \n";

## del dst arp 
		&del_arp;
		sleep $pausetime;

## DEBUG
print "Del arp for test done \n";
print " \n";



## >> Prepare for test end 

for (my $i = 0; $i < $round; $i++) {

print "first_reply Round $i ..... patience is virtue !!! only $frtime seconds \n";
print " \n";
	
@lines = $t->cmd(" ping -s $packetsize -c $frtime $dstlanip > /var/reply_$i.txt ");
#print @lines;

## make result file
		if (-e "reply_$i.txt") { system "del /S /Q reply_$i.txt"; }
		my $Result = "reply_$i.txt";
    open RESULT, ">$Result"
        or die "Open $Result file with error: ($!)";
    print RESULT " $srclanip ----- $dstlanip \n";
        
		@lines = $t->cmd(" cat /var/reply_$i.txt ");
    print RESULT "@lines\n";
      
		close RESULT; 

## DEBUG
print "make first_reply result file reply_$i.txt finish \n";
print " \n";

### del arp 
## del src arp 
@lines = $t->cmd(" arp -d $dstlanip ");
print @lines;

## DEBUG
#@lines = $t->cmd(" arp -n ");
#print @lines;

## DEBUG
print "delete src arp finish \n";

## del dst arp 
		&del_arp;
		sleep $pausetime;

sleep 1;

}

## del box file
@lines = $t->cmd(" rm -rf /var/reply*.txt ");
print @lines;

$t->close;

## DEBUG
print "finish doing first_reply test \n";
print " \n";

}
#/**********************************************************************
#function name: prepare_for_iperf
#
#description: get iperf for src and dst box and start iperf server on dst
#              
#	
#input: BoxList.lst
#
#output: 
#**********************************************************************/
sub prepare_for_iperf {
   
## DEBUG
print "Start prepare for iperf test \n";
print " \n";
#sleep 1;
 
my $t = new Net::Telnet (Timeout => $timeout,
                      );                 #端口默认
                      
## prepare for the src
print "get iperf for the src\n";
$t->open("$srcwanip");
$t->login($user, $pass);
print @lines;

## get iperf 
@lines = $t->cmd(" ftpget -u skyphy -p networks -P 21 192.168.1.112 /var/iperf /home/rock/iperf ");
print @lines;
#@lines = $t->cmd(" ls -l /var/iperf ");
#print @lines;

print "we got iperf for src\n";
print " \n";

sleep 1;

$t->close;


## prepare for the dst
print "get iperf for the dst\n";
$t->open("$dstwanip");
$t->login($user, $pass);
print @lines;

## get iperf 
@lines = $t->cmd(" ftpget -u skyphy -p networks -P 21 192.168.1.112 /var/iperf /home/rock/iperf ");
print @lines;
#@lines = $t->cmd(" ls -l /var/iperf ");
#print @lines;

print "we got iperf for dst \n";
print " \n";

@lines = $t->cmd(" killall -9 iperf ");
#print @lines;

sleep 2;

@lines = $t->cmd(" /var/iperf -s -u -l 1472 > /var/server_iperf_$i.txt & ");
#print @lines;

sleep 2;

@lines = $t->cmd("  /usr/bin/uptime ");
print @lines;

sleep 2;

$t->close;
## DEBUG
print "finish prepare for iperf test \n";    
print " \n";

}



#/**********************************************************************
#function name: do_iperf
#
#description: 
#              
#	
#input: 
#
#output: 
#**********************************************************************/
sub do_iperf {

## debug
print "Start doing iperf test,pleast wait for at least $count seconds \n";
sleep 1;

#my $i;
my $clientresult;

my $t = new Net::Telnet (Timeout => $timeout,
                      );                 #端口默认
$t->open("$srcwanip");
$t->login($user, $pass);
print @lines;

## << Prepare for test begin
@lines = $t->cmd(" ping -c 30 $dstlanip ");
#print @lines;

## DEBUG
print "Prepare for test with arp done \n";
print " \n";

## >> Prepare for test end


for ( $i = 0; $i < $round; $i++) {

## Prepare for iperf start
 
		&prepare_for_iperf;
		
## Prepare for iperf end

print "Iperf Round $i ..... patience is virtue !!! only $count seconds \n";
print " \n";


$clientresult="client_iperf_$i.txt";

@lines = $t->cmd(" /var/iperf -c $dstlanip -i 1 -t $count -u -b 20M -l $packetsize > /var/$clientresult ");
#print @lines;

## make result file
		if (-e "$clientresult") { system "del /S /Q $clientresult"; }
		my $Result = "$clientresult";
    open RESULT, ">$Result"
        or die "Open $Result file with error: ($!)";
    print RESULT " $srclanip ----- $dstlanip \n";
        
		@lines = $t->cmd(" cat /var/$clientresult ");
    print RESULT "@lines\n";
      
		close RESULT; 

## DEBUG
print "make iperf result file $clientresult finish \n";
print " \n";

## Clear for iperf start
 
		&clear_for_iperf;
		
## Clear for iperf end

}

## del box file
@lines = $t->cmd(" rm -rf /var/client_iperf*.txt ");
print @lines;

$t->close;

## DEBUG
print "finish doing iperf test \n";
print " \n";

}

#/**********************************************************************
#function name: clear_for_iperf
#
#description: Stop iperf server and make iperf result on dst Box
#              
#	
#input: BoxList.lst
#
#output: 
#**********************************************************************/
sub clear_for_iperf {
   
## DEBUG
print "Start clear iperf test \n";
print " \n";
#sleep 1;

my $svrresult;
 
my $t = new Net::Telnet (Timeout => $timeout,
                      );                 #端口默认
             
## prepare for the dst
print "get iperf for the dst\n";
$t->open("$dstwanip");
$t->login($user, $pass);
print @lines;

@lines = $t->cmd(" killall -9 iperf ");
#print @lines;
sleep 1;
@lines = $t->cmd(" killall -9 iperf ");
#print @lines;
sleep 1;

print " \n";

$svrresult="server_iperf_$i.txt";

## make result file
		if (-e "$svrresult") { system "del /S /Q $svrresult"; }
		my $Result = "$svrresult";
    open RESULT, ">$Result"
        or die "Open $Result file with error: ($!)";
    print RESULT " $srclanip ----- $dstlanip \n";
        
		@lines = $t->cmd(" cat /var/$svrresult ");
    print RESULT "@lines\n";
      
		close RESULT; 

## DEBUG
print "make iperf result file $svrresult finish \n";
print " \n";

sleep 1;

#sleep 1;

$t->close;

## DEBUG
print "finish clear iperf test \n";
print " \n";    

}


#/**********************************************************************
#function name: del_arp
#
#description: 
#              
#	
#input: 
#
#output: 
#**********************************************************************/
sub del_arp {

## debug
print "Start delete arp \n";
sleep 1;
   

## del dst arp 
my $t = new Net::Telnet (Timeout => $timeout,
                      );                 #端口默认
$t->open("$dstwanip");
$t->login($user, $pass);
print @lines;

@lines = $t->cmd(" arp -d $srclanip ");
print @lines;

## DEBUG
#@lines = $t->cmd(" arp -n ");
#print @lines;

sleep 1;

$t->close;

## DEBUG
print "delete dst arp finish \n";
print " \n";
        
}


#/**********************************************************************
#function name: prepare_for_iperf_packet
#
#description: Make sure iperf on src/dst box,start iperf server on dst Box
#              
#	
#input: BoxList.lst
#
#output: 
#**********************************************************************/
sub prepare_for_iperf_packet {
   
## DEBUG
print "Start prepare for packet iperf test \n";
print " \n";
#sleep 1;
 
my $t = new Net::Telnet (Timeout => $timeout,
                      );                 #端口默认
                      
## prepare for the src
print "get iperf for the src\n";
$t->open("$srcwanip");
$t->login($user, $pass);
print @lines;

## get iperf 
@lines = $t->cmd(" ftpget -u skyphy -p networks -P 21 192.168.1.112 /var/iperf /home/rock/iperf ");
print @lines;
#@lines = $t->cmd(" ls -l /var/iperf ");
#print @lines;

print "we got iperf for src\n";
print " \n";

#sleep 1;

$t->close;


## prepare for the dst
print "get iperf for the dst\n";
$t->open("$dstwanip");
$t->login($user, $pass);
print @lines;

## get iperf 
@lines = $t->cmd(" ftpget -u skyphy -p networks -P 21 192.168.1.112 /var/iperf /home/rock/iperf ");
print @lines;
#@lines = $t->cmd(" ls -l /var/iperf ");
#print @lines;

print "we got iperf for dst \n";
print " \n";

@lines = $t->cmd(" killall -9 iperf ");
#print @lines;
sleep 1;
@lines = $t->cmd(" /var/iperf -s -u -l 1472 > /var/server_iperf_${psize}_$i.txt & ");
#print @lines;
print " \n";

sleep 2;
$t->close;

## DEBUG
print "finish prepare for iperf test \n";
print " \n";    

}


#/**********************************************************************
#function name: clear_for_iperf_packet
#
#description: Stop iperf server on dst Box
#              
#	
#input: BoxList.lst
#
#output: 
#**********************************************************************/
sub clear_for_iperf_packet {
   
## DEBUG
print "Start clear iperf test \n";
print " \n";
#sleep 1;

my $svrresult;
 
my $t = new Net::Telnet (Timeout => $timeout,
                      );                 #端口默认
             
## prepare for the dst
print "get iperf for the dst\n";
$t->open("$dstwanip");
$t->login($user, $pass);
print @lines;

@lines = $t->cmd(" killall -9 iperf ");
#print @lines;
sleep 1;
@lines = $t->cmd(" killall -9 iperf ");
#print @lines;
sleep 1;

print " \n";

$svrresult="server_iperf_${psize}_$i.txt";

## make result file
		if (-e "$svrresult") { system "del /S /Q $svrresult"; }
		my $Result = "$svrresult";
    open RESULT, ">$Result"
        or die "Open $Result file with error: ($!)";
    print RESULT " $srclanip ----- $dstlanip \n";
        
		@lines = $t->cmd(" cat /var/$svrresult ");
    print RESULT "@lines\n";
      
		close RESULT; 

## DEBUG
print "make iperf result file $svrresult finish \n";
print " \n";

sleep 1;

#sleep 1;

$t->close;

## DEBUG
print "finish clear iperf test \n";
print " \n";    

}

#/**********************************************************************
#function name: do_iperf_packet
#
#description: UDP BandWide=20Mbit/s MaxPacket=1472 bytes
#              
#	
#input: 
#
#output: 
#**********************************************************************/
sub do_iperf_packet {

## debug
print "Start doing packet size iperf test,pleast wait for at least $count seconds \n";
sleep 1;

my $clientresult;

my $t = new Net::Telnet (Timeout => $timeout,
                      );                 #端口默认
$t->open("$srcwanip");
$t->login($user, $pass);
print @lines;

## << Prepare for test begin
if ($delarp==0){

@lines = $t->cmd(" ping -c $pausetime $dstlanip ");
print @lines;

## DEBUG
print "Prepare for test with arp done \n";
print " \n";

}
## >> Prepare for test end



print "Iperf ${psize}_Packets Round $i ..... patience is virtue !!! only $count seconds \n";
print " \n";

$clientresult="client_iperf_${psize}_$i.txt";

@lines = $t->cmd(" /var/iperf -c $dstlanip -i 1 -t $count -u -b 20M -l $psize > /var/$clientresult ");
#print @lines;

## make result file
		if (-e "$clientresult") { system "del /S /Q $clientresult"; }
		my $Result = "$clientresult";
    open RESULT, ">$Result"
        or die "Open $Result file with error: ($!)";
    print RESULT " $srclanip ----- $dstlanip \n";
        
		@lines = $t->cmd(" cat /var/$clientresult ");
    print RESULT "@lines\n";
      
		close RESULT; 

## DEBUG
print "make iperf result file $clientresult finish \n";
print " \n";

sleep 1;



## del box file
@lines = $t->cmd(" rm -rf /var/iperf*.txt ");
print @lines;

$t->close;

## DEBUG
print "finish doing packet iperf test \n";
print " \n";

}

#/**********************************************************************
#function name: do_ping_packet
#
#description: doing ping test according to packet size in conf.xml
#              
#	
#input: 
#
#output: 
#**********************************************************************/
sub do_ping_packet {

## debug
print "Start doing packet size ping test,pleast wait for at least $count seconds \n";
sleep 1;

## start ping test

my $t = new Net::Telnet (Timeout => $timeout,
                      );                 #端口默认
$t->open("$srcwanip");
$t->login($user, $pass);
print @lines;

## << Prepare for test begin
if ($delarp==0){

@lines = $t->cmd(" ping -c 20 $dstlanip ");
print @lines;

## DEBUG
print "Prepare for test with arp done \n";
print " \n";

}else{
## del src arp 
@lines = $t->cmd(" arp -d $dstlanip ");
print @lines;

## DEBUG
#@lines = $t->cmd(" arp -n ");
#print @lines;

## DEBUG
print "delete src arp finish \n";

## del dst arp 
		&del_arp;
		sleep $pausetime;

## DEBUG
print "Prepare for test without arp done \n";
print " \n";

}

## >> Prepare for test end 

for (my $i = 0; $i < $round; $i++) {

print "Ping ${psize}_Packet Round $i ..... patience is virtue !!! only $count seconds \n";
print " \n";
	
@lines = $t->cmd(" ping -c $count -s $psize $dstlanip > /var/ping_${psize}_$i.txt ");
#print @lines;

## make result file
		if (-e "ping_${psize}_$i.txt") { system "del /S /Q ping_${psize}_$i.txt"; }
		my $Result = "ping_${psize}_$i.txt";
    open RESULT, ">$Result"
        or die "Open $Result file with error: ($!)";
    print RESULT " $srclanip ----- $dstlanip \n";
        
		@lines = $t->cmd(" cat /var/ping_${psize}_$i.txt ");
    print RESULT "@lines\n";
      
		close RESULT; 

## DEBUG
print "make ping result file ping_${psize}_$i.txt finish \n";
print " \n";

## del arp 
if ( $delarp==1 ){

## del src arp 
@lines = $t->cmd(" arp -d $dstlanip ");
print @lines;

## DEBUG
#@lines = $t->cmd(" arp -n ");
#print @lines;

## DEBUG
print "delete src arp finish \n";

## del dst arp 
		&del_arp;
		sleep $pausetime;
}
sleep 1;

}

## del box file
@lines = $t->cmd(" rm -rf /var/ping*.txt ");
print @lines;

$t->close;

## DEBUG
print "finish doing packet ping test \n";
print " \n";

}


#/**********************************************************************
#function name: telnet_to_Box
#
#description: telnet to Box and doing sth according to parameters in BoxList.lst
#              
#	
#input: BoxList.lst
#
#output: 
#**********************************************************************/
sub telnet_to_Box {
   
#debug
print "telnet to $BoxIP \n"; 

my $t = new Net::Telnet (Timeout => $timeout,);                 #端口默认
$t->open("$BoxIP");
$t->login($user, $pass);
print @lines;

## <Unused telnet cmd

#@lines = $t->cmd("who");
#print @lines;
#print "\n";
#sleep 10;
#@lines = $t->cmd('ls');
#print @lines;
#$t->cmd(String => 'start_cmbp', Prompt => "/work in:/",Timeout => 20);

## Unused telnet cmd >

#sleep 1;
## Start execute cmd

################# set default value begin

    ## Set default query
    @lines = $t->cmd(" echo 4 > /proc/sys/net/mesh/query_interval ");
    print @lines;
    #debug
#    print "$boxcmd \n";
    @lines = $t->cmd(" cat /proc/sys/net/mesh/query_interval ");
		print @lines;
## Set default reply
		@lines = $t->cmd(" echo 4 > /proc/sys/net/mesh/reply_interval ");
    print @lines;
    #debug
#    print "$boxcmd \n";
    @lines = $t->cmd(" cat /proc/sys/net/mesh/reply_interval ");
		print @lines;

## Set default slow		
		@lines = $t->cmd(" echo 28 > /proc/sys/net/mesh/slow_update_interval ");
    print @lines;
    #debug
#    print "$boxcmd \n";
    @lines = $t->cmd(" cat /proc/sys/net/mesh/slow_update_interval ");
		print @lines;
## Set default fast		
		@lines = $t->cmd(" echo 6 > /proc/sys/net/mesh/fast_update_interval ");
    print @lines;
    #debug
#    print "$boxcmd \n";
    @lines = $t->cmd(" cat /proc/sys/net/mesh/fast_update_interval ");
		print @lines;

		print "finish set default query reply slow fast \n";  

		print "\n";

################# set default value end
		
## Exec boxcmd1
    @lines = $t->cmd(" echo ${boxvalue1} > /proc/sys/net/mesh/${boxcmd1} ");
    print @lines;
    #debug
#    print "$boxcmd \n";
    @lines = $t->cmd(" cat /proc/sys/net/mesh/${boxcmd1} ");
		print @lines;

## Exec boxcmd2		
		@lines = $t->cmd(" echo ${boxvalue2} > /proc/sys/net/mesh/${boxcmd2} ");
    print @lines;
    #debug
#    print "$boxcmd \n";
    @lines = $t->cmd(" cat /proc/sys/net/mesh/${boxcmd2} ");
		print @lines;

		print "finish exec echo ${boxcmd1}--${boxvalue1}  ${boxcmd2}--${boxvalue2} \n";  

$t->close;

print "\n";

}


#/**********************************************************************
#function name: gen_BoxList
#
#description: generate BoxList.lst according to parameters in conf.xml
#              
#	
#input: 
#
#output: 
#**********************************************************************/
sub gen_BoxList {
    if (-e "BoxList.lst") { system "del /S /Q BoxList.lst"; }
    
    my $BoxList = "BoxList.lst";
    open BOXLIST, ">$BoxList"
        or die "Open $BoxList file with error: ($!)";

    foreach my $EachClient (@{$data->{GlobalParam}->{AllBoxInfo}->{BoxInfo}}) {
        print BOXLIST "$EachClient->{BoxIP}\n";
    }   
    close BOXLIST;
}
################################################################################
#end of the file                                                               #
################################################################################
